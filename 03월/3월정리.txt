확장팩 react extension pack 설치

components 생성후 rcc(클래스형 컴포넌트) or rsc(함수형 컴포넌트) 자동생성
함수형은 화살표함수보다는 function 사용

CRA 방식
npx create-react-app app
sass dependency 추가
npm i sass

상태관리, 비구조화{}

부모 자식컴포넌트간의 함수 or state 전달은 비구조화{}를 사용

defaultProps 안쓰고 useState({})에서 바로 상태관리 가능
defaultProps 쓰는게 더 나음

클릭이벤트는 onClick
input 태그로 입력받은값 상태변수에 넣으려면 onChange, e.target.value 사용

부모 컴포넌트의 상태변수를 자식에서 전달받아
자식 컴포넌트의 return문에서 뿌려주는 방식으로 사용가능
return문의 넣어줄 태그를 return문 밖에서 변수에 담아 변수째로 return문에 뿌려줄수있음

클래스형 컴포넌트와 함수형 컴포넌트의 차이
클래스는 내부 함수들간에 ,(콤마)를 안씀
클래스는 다른 컴포넌트를 상속(extends) 받아서 사용가능
클래스형 컴포넌트는 반드시 생성자부터
super(props)를 하게 되면 this를 사용가능(this는 컴포넌트를 지칭)

this.setState()할때 this를 직접 저장하면 전개연산자 필요없이 저장가능


클릭 이벤트와 매개변수 전달 구현 : 화살표함수로 e와 parameter를 같이 전달
클릭 이벤트 함수호출방식 말고 직접 구현 : 화살표함수로 중괄호 없이 하면 바로 리턴

input 태그에 value로 상태관리의 state로 연결해줘야함
배열.filter((item)=>조건) 배열에서 조건에 해당하는 것만 걸러짐
배열.includes('항목') 배열에 항목이 있으면 true 없으면 false 반환


라우터 설치
npm i react-router-dom
BrowserRouter : 현재 위치의 URL을 저장
Routes : 자식 route들을 담는곳
Route : path(본인이 설정)를 통해 url을 이동, index는 기본으로 연결된 페이지
연결한 path를 Link to를 통해 이동

리액트에서 제이쿼리 : npm i jquery
제이쿼리는 useEffect 안에서 써야됨(마운트가 끝난다음에 실행해야해서)
제이쿼리와 상태관리를 섞어서 사용


const regExp1 = /[`~!@#$%^&*()\-_=+[{\]}\\|;:'",<.>/?]/g;  //(특수문자) 
이스케이프 처리 해야되는 문자 : \-    \]   \\


open jdk에서 java 8버전 설치

환경변수 설정하고
vscode에 extension pack for java 설치
setting.json -> java runtime 설정

"java.inlayHints.parameterNames.enabled": "none",
"java.configuration.runtimes": [
        { //자바 JDK 8
          "name": "JavaSE-1.8",
          "path": "C:\\Program Files\\java\\java-se-8u42-ri\bin",
          "default": true
        },
        { //자바 JDK 11
          "name": "JavaSE-11",
          "path": "C:\\Program Files\\java\\jdk-11\bin",
          "default": false
        }
      ]

prettier code format

JAVA_HOME = C:\Program Files\java\jdk-11
PATH =  %JAVA_HOME%bin

java console internalConsole

카카오 주소 검색 API
daum postcode 
postcode v2.js 다른이름으로 저장
script 복사

initLayerPosition(팝업창 크기, 위치 등 설정) 삭제
body에 onLoad="sample2_execDaumPostcode();" 추가

npm i react-daum-postcode
import DaumPostcode from 'react-daum-postcode'

<DaumPostcode 
	id="postcode"
	onComplete={onCompletePostcode}
/>

System.out.printf("%d %o %x", num_d, num_o, num_x)
=> printf와 지시자를 사용하여 10진수 8진수 16진수의 형식으로 출력가능

10진수를 2진수 문자열로 변환 => Integer.toBinaryString(num_d)
10진수를 8진수 문자열로 변환 => Integer.toOctalString(num_d)
10진수를 16진수 문자열로 변환 => Integer.toHexString(num_d)

생년, 생월, 생일 각각의 에러메시지를 띄울때 onChange 3개에서 조건을 따로 걸기보단
useEffect를 이용하여 state.생년, state.생월, state.생일에 변화가 있을 때마다
if문으로 조건을 걸어서 에러메시지 변경

import java.util.Scanner => Scanner 클래스 불러옴
Scanner sc = new Scanner(System.in);
sc.nextLine()
sc.next()
sc.nextInt()
sc.nextDouble()
sc.next.charAt(index)

React form 전송 고유 이벤트 onSubmit